// <auto-generated />
using System;
using CmApp.Contracts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CmApp.Contracts.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CmApp.Contracts.Entities.CarEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Displacement")
                        .HasColumnType("float");

                    b.Property<string>("Drive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Engine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interior")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MakeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModelID")
                        .HasColumnType("int");

                    b.Property<string>("Power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Steering")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserEntityID")
                        .HasColumnType("int");

                    b.Property<string>("Vin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MakeID");

                    b.HasIndex("ModelID");

                    b.HasIndex("UserEntityID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.CarMakesEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Makes");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.CarModelEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarMakesEntityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CarMakesEntityID");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.EquipmentEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarEntityID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CarEntityID");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.PasswordResetEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.RepairEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Car")
                        .HasColumnType("int");

                    b.Property<int?>("CarEntityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CarEntityID");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.ShippingEntity", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<double>("AuctionFee")
                        .HasColumnType("float");

                    b.Property<string>("AuctionFeeCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Customs")
                        .HasColumnType("float");

                    b.Property<string>("CustomsCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TransferFee")
                        .HasColumnType("float");

                    b.Property<string>("TransferFeeCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TransportationFee")
                        .HasColumnType("float");

                    b.Property<string>("TransportationFeeCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Shippings");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.SummaryEntity", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("BaseCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BoughtPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.Property<string>("SelectedCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sold")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SoldDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SoldPrice")
                        .HasColumnType("float");

                    b.Property<string>("SoldWithin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.TrackingEntity", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("AirBag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContainerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Damage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePickedUp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinalPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Radio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Running")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowImages")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wheels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Trackings");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.UrlEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarEntityID")
                        .HasColumnType("int");

                    b.Property<int?>("TrackingEntityID")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CarEntityID");

                    b.HasIndex("TrackingEntityID");

                    b.ToTable("Urls");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.UserEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.CarEntity", b =>
                {
                    b.HasOne("CmApp.Contracts.Entities.CarMakesEntity", "Make")
                        .WithMany()
                        .HasForeignKey("MakeID");

                    b.HasOne("CmApp.Contracts.Entities.CarModelEntity", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID");

                    b.HasOne("CmApp.Contracts.Entities.UserEntity", null)
                        .WithMany("Cars")
                        .HasForeignKey("UserEntityID");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.CarModelEntity", b =>
                {
                    b.HasOne("CmApp.Contracts.Entities.CarMakesEntity", null)
                        .WithMany("Models")
                        .HasForeignKey("CarMakesEntityID");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.EquipmentEntity", b =>
                {
                    b.HasOne("CmApp.Contracts.Entities.CarEntity", null)
                        .WithMany("Equipment")
                        .HasForeignKey("CarEntityID");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.PasswordResetEntity", b =>
                {
                    b.HasOne("CmApp.Contracts.Entities.UserEntity", "User")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.RepairEntity", b =>
                {
                    b.HasOne("CmApp.Contracts.Entities.CarEntity", null)
                        .WithMany("Repairs")
                        .HasForeignKey("CarEntityID");
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.ShippingEntity", b =>
                {
                    b.HasOne("CmApp.Contracts.Entities.CarEntity", "Car")
                        .WithOne("Shipping")
                        .HasForeignKey("CmApp.Contracts.Entities.ShippingEntity", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.SummaryEntity", b =>
                {
                    b.HasOne("CmApp.Contracts.Entities.CarEntity", "Car")
                        .WithOne("Summary")
                        .HasForeignKey("CmApp.Contracts.Entities.SummaryEntity", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.TrackingEntity", b =>
                {
                    b.HasOne("CmApp.Contracts.Entities.CarEntity", "Car")
                        .WithOne("Tracking")
                        .HasForeignKey("CmApp.Contracts.Entities.TrackingEntity", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CmApp.Contracts.Entities.UrlEntity", b =>
                {
                    b.HasOne("CmApp.Contracts.Entities.CarEntity", null)
                        .WithMany("Urls")
                        .HasForeignKey("CarEntityID");

                    b.HasOne("CmApp.Contracts.Entities.TrackingEntity", null)
                        .WithMany("Images")
                        .HasForeignKey("TrackingEntityID");
                });
#pragma warning restore 612, 618
        }
    }
}
